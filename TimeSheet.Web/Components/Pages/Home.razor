@page "/Home"
@inject AuthApiClient AuthAPI
@inject TimesheetApiClient TimeSheetAPI
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.ComponentModel.DataAnnotations
@using TimeSheet.Web.Components.Models
@inject ProtectedSessionStorage ProtectedSessionStore
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>TimeSheet System</PageTitle>

<div class="row mb-3">
    <div class="col-11">
        <h1>TimeSheet System</h1>
    </div>
    <div class="col-1">
        <LogoutButton />
    </div>
</div>

<div>
    <div class="accordion">
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                    Capture Timesheet Entry
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse show" data-bs-parent="#accordionExample" style="padding: 1%;">
                <EditForm Model=@timeSheetEntryInput OnValidSubmit="FormSubmitted">
                    <DataAnnotationsValidator />
                    <div class="row mb-3 ">
                        <div class="form-group col-6">
                            <label class="mb-3" for="Description">Description</label>
                            <InputTextArea @bind-Value=timeSheetEntryInput.Description class="form-control" id="Description" />
                            <ValidationMessage For="() => timeSheetEntryInput.Description" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-3">
                            <label class="mb-3" for="Duration">Duration in Minutes</label>
                            <InputNumber @bind-Value=timeSheetEntryInput.DurationInMinutes class="form-control" id="Duration" />
                            <ValidationMessage For="() => timeSheetEntryInput.DurationInMinutes" />
                        </div>
                    </div>
                    <div class="row">
                        <div>
                            <input type="submit" value="Submit" class="btn btn-primary mt-3" style="width: 50%;" />
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

</div>

<div class="card mt-3">
    <div class="card-body">
        <h5 class="card-title mb-3">Timesheet Entries</h5>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Description</th>
                    <th scope="col">Duration in Minutes</th>
                    <th scope="col">DateTime Logged</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var timesheetEntry in timeSheetEntries)
                {
                    <tr>
                        <td>@timesheetEntry.Id</td>
                        <td>@timesheetEntry.Description</td>
                        <td>@timesheetEntry.DurationInMinutes</td>
                        <td>@timesheetEntry.DateLogged</td>
                        <td>
                            <button @onclick="async () => await HandleDeleteTimeSheetEntry(timesheetEntry.Id)"
                                    class="btn btn-danger">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    public TimeSheetEntryInput timeSheetEntryInput = new TimeSheetEntryInput();
    public List<TimeSheetEntry> timeSheetEntries = new List<TimeSheetEntry>();
    public string authJWTToken = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authJWTTokenProtected = await ProtectedSessionStore.GetAsync<string>("authJWTToken");
        authJWTToken = authJWTTokenProtected.Value;

        await FetchTimeSheetEntries();
    }

    async Task FetchTimeSheetEntries()
    {
        if (!string.IsNullOrEmpty(authJWTToken))
        {
            timeSheetEntries = await TimeSheetAPI.GetTimeSheetEntries(authJWTToken);
        }
        else
        {
            Console.WriteLine("JWT Token empty");
        }
    }

    async Task HandleDeleteTimeSheetEntry(int timesheetEntryId)
    {
        if (string.IsNullOrEmpty(authJWTToken))
        {
            Console.WriteLine("JWT Token empty");
            return;
        }

        var success = await TimeSheetAPI.DeleteTimeSheetEntry(authJWTToken, timesheetEntryId);

        if (success)
        {
            await JS.InvokeVoidAsync("alert", "Time Sheet Entry Deleted");
            await FetchTimeSheetEntries();
        }
    }

    async Task FormSubmitted()
    {
        if (string.IsNullOrEmpty(authJWTToken))
        {
            Console.WriteLine("JWT Token empty");
            return;
        }

        var success = await TimeSheetAPI.CreateTimeSheetEntry(authJWTToken,
            timeSheetEntryInput.DurationInMinutes,
            timeSheetEntryInput.Description);

        if (success)
        {
            await JS.InvokeVoidAsync("alert", "Time Sheet Entry Created");
            await FetchTimeSheetEntries();
        }
    }
}
